使用设计模式的初衷是提高体统可维护性的同时,也提高系统的可复用性

// "开-闭"原则
对扩展开放,对修改关闭.
核心原则是抽象化


// 里氏替换原则
任何父类可以出现的地方,子类一定可以出现
里氏替换原则是继承复用的基石,只有当子类可以替换掉基类,软件单位的功能不会受到影响时,
基类才能被真正的复用,而子类才能够在基类上增加新的功能.

// 依赖倒转原则
实现"开-闭"原则的关键是抽象化,并且从抽象化导出具体化实现.如果说"开-闭"原则是面向对象设计的目标的话,
依赖倒转原则就是面向对象设计的主要机制.

依赖倒转原则:要依赖于抽象,不依赖于具体的实现.

1>高层模块不应该直接依赖于底层模块的具体实现,而应该依赖于底层的抽象.
换言之,模块间的以来是通过抽象发生,实现类之间不发生直接的依赖关系,其依赖关系是通过接口或者抽象类产生的.

2>接口和抽象类不应该依赖于实现类,而实现类依赖接口或者抽象类."面向接口编程"思想是这一点的最好体现.

对于一个系统来说,一般抽象层次越高,它的稳定性就越好,因此也是作为复用的重点.

// 接口隔离原则
接口隔离原则:使用多个专门的接口比使用单一的总接口要好.从一个客户类的角度来讲:
一个类对另外一个类的依赖性应当是建立在最小的接口上的.

// 迪特米法则
迪特米法则:又称为最少知识原则,就是说一个对象应当对其他对象尽可能少的了解.
1>只与你直接的朋友通信
2>不跟陌生人说话
3>每个软件单位对其他的单位都只有最少知识,并且局限于那些与那些与本单位密切相关的软件单位

1.单一职责原则要求实现类职责单一
2.里氏替换原则要求不要去破坏继承系统
3.依赖倒置原则要求面向接口编程
4.接口隔离原则要求在设计接口的时候要精简单一
5.迪米特法则要求降低耦合
6."开-闭"原则是总纲,要求对扩展开放,对修改关闭


动词用接口,名词用抽象
使用合适的设计模式,使得代码解耦